// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* login_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  login_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_login_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_login_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_session_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_session_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_session_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_session_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_login_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_login_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* login_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  login_reply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_login_2eproto() {
  protobuf_AddDesc_login_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "login.proto");
  GOOGLE_CHECK(file != NULL);
  login_request_descriptor_ = file->message_type(0);
  static const int login_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_request, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_request, passwd_),
  };
  login_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      login_request_descriptor_,
      login_request::default_instance_,
      login_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(login_request));
  user_login_request_descriptor_ = file->message_type(1);
  static const int user_login_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_login_request, uid_),
  };
  user_login_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_login_request_descriptor_,
      user_login_request::default_instance_,
      user_login_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_login_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_login_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_login_request));
  user_session_request_descriptor_ = file->message_type(2);
  static const int user_session_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_session_request, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_session_request, sk_),
  };
  user_session_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_session_request_descriptor_,
      user_session_request::default_instance_,
      user_session_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_session_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_session_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_session_request));
  user_session_reply_descriptor_ = file->message_type(3);
  static const int user_session_reply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_session_reply, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_session_reply, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_session_reply, sk_),
  };
  user_session_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_session_reply_descriptor_,
      user_session_reply::default_instance_,
      user_session_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_session_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_session_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_session_reply));
  user_login_reply_descriptor_ = file->message_type(4);
  static const int user_login_reply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_login_reply, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_login_reply, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_login_reply, sk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_login_reply, gateip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_login_reply, gateport_),
  };
  user_login_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_login_reply_descriptor_,
      user_login_reply::default_instance_,
      user_login_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_login_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_login_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_login_reply));
  login_reply_descriptor_ = file->message_type(5);
  static const int login_reply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_reply, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_reply, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_reply, sk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_reply, gateip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_reply, gateport_),
  };
  login_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      login_reply_descriptor_,
      login_reply::default_instance_,
      login_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(login_reply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_login_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    login_request_descriptor_, &login_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_login_request_descriptor_, &user_login_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_session_request_descriptor_, &user_session_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_session_reply_descriptor_, &user_session_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_login_reply_descriptor_, &user_login_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    login_reply_descriptor_, &login_reply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_login_2eproto() {
  delete login_request::default_instance_;
  delete login_request_reflection_;
  delete user_login_request::default_instance_;
  delete user_login_request_reflection_;
  delete user_session_request::default_instance_;
  delete user_session_request_reflection_;
  delete user_session_reply::default_instance_;
  delete user_session_reply_reflection_;
  delete user_login_reply::default_instance_;
  delete user_login_reply_reflection_;
  delete login_reply::default_instance_;
  delete login_reply_reflection_;
}

void protobuf_AddDesc_login_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013login.proto\"0\n\rlogin_request\022\017\n\007accoun"
    "t\030\001 \002(\t\022\016\n\006passwd\030\002 \002(\t\"!\n\022user_login_re"
    "quest\022\013\n\003uid\030\001 \002(\004\"/\n\024user_session_reque"
    "st\022\013\n\003uid\030\001 \002(\004\022\n\n\002sk\030\002 \002(\t\":\n\022user_sess"
    "ion_reply\022\013\n\003err\030\001 \002(\005\022\013\n\003uid\030\002 \002(\004\022\n\n\002s"
    "k\030\003 \001(\t\"Z\n\020user_login_reply\022\013\n\003err\030\001 \002(\005"
    "\022\013\n\003uid\030\002 \002(\004\022\n\n\002sk\030\003 \001(\t\022\016\n\006gateip\030\004 \001("
    "\t\022\020\n\010gateport\030\005 \001(\005\"U\n\013login_reply\022\013\n\003er"
    "r\030\001 \002(\005\022\013\n\003uid\030\002 \001(\004\022\n\n\002sk\030\003 \001(\t\022\016\n\006gate"
    "ip\030\004 \001(\t\022\020\n\010gateport\030\005 \001(\005", 386);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "login.proto", &protobuf_RegisterTypes);
  login_request::default_instance_ = new login_request();
  user_login_request::default_instance_ = new user_login_request();
  user_session_request::default_instance_ = new user_session_request();
  user_session_reply::default_instance_ = new user_session_reply();
  user_login_reply::default_instance_ = new user_login_reply();
  login_reply::default_instance_ = new login_reply();
  login_request::default_instance_->InitAsDefaultInstance();
  user_login_request::default_instance_->InitAsDefaultInstance();
  user_session_request::default_instance_->InitAsDefaultInstance();
  user_session_reply::default_instance_->InitAsDefaultInstance();
  user_login_reply::default_instance_->InitAsDefaultInstance();
  login_reply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_login_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_login_2eproto {
  StaticDescriptorInitializer_login_2eproto() {
    protobuf_AddDesc_login_2eproto();
  }
} static_descriptor_initializer_login_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int login_request::kAccountFieldNumber;
const int login_request::kPasswdFieldNumber;
#endif  // !_MSC_VER

login_request::login_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void login_request::InitAsDefaultInstance() {
}

login_request::login_request(const login_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void login_request::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

login_request::~login_request() {
  SharedDtor();
}

void login_request::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void login_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* login_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return login_request_descriptor_;
}

const login_request& login_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

login_request* login_request::default_instance_ = NULL;

login_request* login_request::New() const {
  return new login_request;
}

void login_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool login_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_passwd;
        break;
      }

      // required string passwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void login_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // required string passwd = 2;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->passwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* login_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // required string passwd = 2;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->passwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int login_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required string passwd = 2;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void login_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const login_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const login_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void login_request::MergeFrom(const login_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void login_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_request::CopyFrom(const login_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void login_request::Swap(login_request* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata login_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = login_request_descriptor_;
  metadata.reflection = login_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_login_request::kUidFieldNumber;
#endif  // !_MSC_VER

user_login_request::user_login_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_login_request::InitAsDefaultInstance() {
}

user_login_request::user_login_request(const user_login_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_login_request::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_login_request::~user_login_request() {
  SharedDtor();
}

void user_login_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_login_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_login_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_login_request_descriptor_;
}

const user_login_request& user_login_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

user_login_request* user_login_request::default_instance_ = NULL;

user_login_request* user_login_request::New() const {
  return new user_login_request;
}

void user_login_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_login_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_login_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_login_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_login_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_login_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_login_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_login_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_login_request::MergeFrom(const user_login_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_login_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_login_request::CopyFrom(const user_login_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_login_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void user_login_request::Swap(user_login_request* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_login_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_login_request_descriptor_;
  metadata.reflection = user_login_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_session_request::kUidFieldNumber;
const int user_session_request::kSkFieldNumber;
#endif  // !_MSC_VER

user_session_request::user_session_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_session_request::InitAsDefaultInstance() {
}

user_session_request::user_session_request(const user_session_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_session_request::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  sk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_session_request::~user_session_request() {
  SharedDtor();
}

void user_session_request::SharedDtor() {
  if (sk_ != &::google::protobuf::internal::kEmptyString) {
    delete sk_;
  }
  if (this != default_instance_) {
  }
}

void user_session_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_session_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_session_request_descriptor_;
}

const user_session_request& user_session_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

user_session_request* user_session_request::default_instance_ = NULL;

user_session_request* user_session_request::New() const {
  return new user_session_request;
}

void user_session_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_sk()) {
      if (sk_ != &::google::protobuf::internal::kEmptyString) {
        sk_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_session_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sk;
        break;
      }

      // required string sk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sk()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sk().data(), this->sk().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_session_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // required string sk = 2;
  if (has_sk()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sk().data(), this->sk().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sk(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_session_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // required string sk = 2;
  if (has_sk()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sk().data(), this->sk().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sk(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_session_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // required string sk = 2;
    if (has_sk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sk());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_session_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_session_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_session_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_session_request::MergeFrom(const user_session_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_sk()) {
      set_sk(from.sk());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_session_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_session_request::CopyFrom(const user_session_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_session_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void user_session_request::Swap(user_session_request* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(sk_, other->sk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_session_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_session_request_descriptor_;
  metadata.reflection = user_session_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_session_reply::kErrFieldNumber;
const int user_session_reply::kUidFieldNumber;
const int user_session_reply::kSkFieldNumber;
#endif  // !_MSC_VER

user_session_reply::user_session_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_session_reply::InitAsDefaultInstance() {
}

user_session_reply::user_session_reply(const user_session_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_session_reply::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  sk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_session_reply::~user_session_reply() {
  SharedDtor();
}

void user_session_reply::SharedDtor() {
  if (sk_ != &::google::protobuf::internal::kEmptyString) {
    delete sk_;
  }
  if (this != default_instance_) {
  }
}

void user_session_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_session_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_session_reply_descriptor_;
}

const user_session_reply& user_session_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

user_session_reply* user_session_reply::default_instance_ = NULL;

user_session_reply* user_session_reply::New() const {
  return new user_session_reply;
}

void user_session_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_ = 0;
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_sk()) {
      if (sk_ != &::google::protobuf::internal::kEmptyString) {
        sk_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_session_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint64 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sk;
        break;
      }

      // optional string sk = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sk()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sk().data(), this->sk().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_session_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  // required uint64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // optional string sk = 3;
  if (has_sk()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sk().data(), this->sk().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sk(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_session_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  // required uint64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // optional string sk = 3;
  if (has_sk()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sk().data(), this->sk().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sk(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_session_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

    // required uint64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string sk = 3;
    if (has_sk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sk());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_session_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_session_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_session_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_session_reply::MergeFrom(const user_session_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_sk()) {
      set_sk(from.sk());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_session_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_session_reply::CopyFrom(const user_session_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_session_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void user_session_reply::Swap(user_session_reply* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    std::swap(uid_, other->uid_);
    std::swap(sk_, other->sk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_session_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_session_reply_descriptor_;
  metadata.reflection = user_session_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_login_reply::kErrFieldNumber;
const int user_login_reply::kUidFieldNumber;
const int user_login_reply::kSkFieldNumber;
const int user_login_reply::kGateipFieldNumber;
const int user_login_reply::kGateportFieldNumber;
#endif  // !_MSC_VER

user_login_reply::user_login_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_login_reply::InitAsDefaultInstance() {
}

user_login_reply::user_login_reply(const user_login_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_login_reply::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  sk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gateip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gateport_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_login_reply::~user_login_reply() {
  SharedDtor();
}

void user_login_reply::SharedDtor() {
  if (sk_ != &::google::protobuf::internal::kEmptyString) {
    delete sk_;
  }
  if (gateip_ != &::google::protobuf::internal::kEmptyString) {
    delete gateip_;
  }
  if (this != default_instance_) {
  }
}

void user_login_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_login_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_login_reply_descriptor_;
}

const user_login_reply& user_login_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

user_login_reply* user_login_reply::default_instance_ = NULL;

user_login_reply* user_login_reply::New() const {
  return new user_login_reply;
}

void user_login_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_ = 0;
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_sk()) {
      if (sk_ != &::google::protobuf::internal::kEmptyString) {
        sk_->clear();
      }
    }
    if (has_gateip()) {
      if (gateip_ != &::google::protobuf::internal::kEmptyString) {
        gateip_->clear();
      }
    }
    gateport_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_login_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint64 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sk;
        break;
      }

      // optional string sk = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sk()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sk().data(), this->sk().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gateip;
        break;
      }

      // optional string gateip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gateip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gateip().data(), this->gateip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gateport;
        break;
      }

      // optional int32 gateport = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateport_)));
          set_has_gateport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_login_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  // required uint64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // optional string sk = 3;
  if (has_sk()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sk().data(), this->sk().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sk(), output);
  }

  // optional string gateip = 4;
  if (has_gateip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gateip().data(), this->gateip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->gateip(), output);
  }

  // optional int32 gateport = 5;
  if (has_gateport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gateport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_login_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  // required uint64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // optional string sk = 3;
  if (has_sk()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sk().data(), this->sk().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sk(), target);
  }

  // optional string gateip = 4;
  if (has_gateip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gateip().data(), this->gateip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gateip(), target);
  }

  // optional int32 gateport = 5;
  if (has_gateport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gateport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_login_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

    // required uint64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string sk = 3;
    if (has_sk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sk());
    }

    // optional string gateip = 4;
    if (has_gateip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gateip());
    }

    // optional int32 gateport = 5;
    if (has_gateport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_login_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_login_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_login_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_login_reply::MergeFrom(const user_login_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_sk()) {
      set_sk(from.sk());
    }
    if (from.has_gateip()) {
      set_gateip(from.gateip());
    }
    if (from.has_gateport()) {
      set_gateport(from.gateport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_login_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_login_reply::CopyFrom(const user_login_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_login_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void user_login_reply::Swap(user_login_reply* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    std::swap(uid_, other->uid_);
    std::swap(sk_, other->sk_);
    std::swap(gateip_, other->gateip_);
    std::swap(gateport_, other->gateport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_login_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_login_reply_descriptor_;
  metadata.reflection = user_login_reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int login_reply::kErrFieldNumber;
const int login_reply::kUidFieldNumber;
const int login_reply::kSkFieldNumber;
const int login_reply::kGateipFieldNumber;
const int login_reply::kGateportFieldNumber;
#endif  // !_MSC_VER

login_reply::login_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void login_reply::InitAsDefaultInstance() {
}

login_reply::login_reply(const login_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void login_reply::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  sk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gateip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gateport_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

login_reply::~login_reply() {
  SharedDtor();
}

void login_reply::SharedDtor() {
  if (sk_ != &::google::protobuf::internal::kEmptyString) {
    delete sk_;
  }
  if (gateip_ != &::google::protobuf::internal::kEmptyString) {
    delete gateip_;
  }
  if (this != default_instance_) {
  }
}

void login_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* login_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return login_reply_descriptor_;
}

const login_reply& login_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

login_reply* login_reply::default_instance_ = NULL;

login_reply* login_reply::New() const {
  return new login_reply;
}

void login_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_ = 0;
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_sk()) {
      if (sk_ != &::google::protobuf::internal::kEmptyString) {
        sk_->clear();
      }
    }
    if (has_gateip()) {
      if (gateip_ != &::google::protobuf::internal::kEmptyString) {
        gateip_->clear();
      }
    }
    gateport_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool login_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // optional uint64 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sk;
        break;
      }

      // optional string sk = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sk()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sk().data(), this->sk().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gateip;
        break;
      }

      // optional string gateip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gateip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gateip().data(), this->gateip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gateport;
        break;
      }

      // optional int32 gateport = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateport_)));
          set_has_gateport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void login_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  // optional uint64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // optional string sk = 3;
  if (has_sk()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sk().data(), this->sk().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sk(), output);
  }

  // optional string gateip = 4;
  if (has_gateip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gateip().data(), this->gateip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->gateip(), output);
  }

  // optional int32 gateport = 5;
  if (has_gateport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gateport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* login_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  // optional uint64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // optional string sk = 3;
  if (has_sk()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sk().data(), this->sk().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sk(), target);
  }

  // optional string gateip = 4;
  if (has_gateip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gateip().data(), this->gateip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gateip(), target);
  }

  // optional int32 gateport = 5;
  if (has_gateport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gateport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int login_reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

    // optional uint64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string sk = 3;
    if (has_sk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sk());
    }

    // optional string gateip = 4;
    if (has_gateip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gateip());
    }

    // optional int32 gateport = 5;
    if (has_gateport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void login_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const login_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const login_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void login_reply::MergeFrom(const login_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_sk()) {
      set_sk(from.sk());
    }
    if (from.has_gateip()) {
      set_gateip(from.gateip());
    }
    if (from.has_gateport()) {
      set_gateport(from.gateport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void login_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_reply::CopyFrom(const login_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void login_reply::Swap(login_reply* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    std::swap(uid_, other->uid_);
    std::swap(sk_, other->sk_);
    std::swap(gateip_, other->gateip_);
    std::swap(gateport_, other->gateport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata login_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = login_reply_descriptor_;
  metadata.reflection = login_reply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
