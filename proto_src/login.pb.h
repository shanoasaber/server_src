// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#ifndef PROTOBUF_login_2eproto__INCLUDED
#define PROTOBUF_login_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_login_2eproto();
void protobuf_AssignDesc_login_2eproto();
void protobuf_ShutdownFile_login_2eproto();

class login_request;
class user_login_request;
class user_session_request;
class user_session_reply;
class user_login_reply;
class login_reply;

// ===================================================================

class login_request : public ::google::protobuf::Message {
 public:
  login_request();
  virtual ~login_request();

  login_request(const login_request& from);

  inline login_request& operator=(const login_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const login_request& default_instance();

  void Swap(login_request* other);

  // implements Message ----------------------------------------------

  login_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const login_request& from);
  void MergeFrom(const login_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // required string passwd = 2;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 2;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const char* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:login_request)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_passwd();
  inline void clear_has_passwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* passwd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static login_request* default_instance_;
};
// -------------------------------------------------------------------

class user_login_request : public ::google::protobuf::Message {
 public:
  user_login_request();
  virtual ~user_login_request();

  user_login_request(const user_login_request& from);

  inline user_login_request& operator=(const user_login_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_login_request& default_instance();

  void Swap(user_login_request* other);

  // implements Message ----------------------------------------------

  user_login_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_login_request& from);
  void MergeFrom(const user_login_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:user_login_request)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static user_login_request* default_instance_;
};
// -------------------------------------------------------------------

class user_session_request : public ::google::protobuf::Message {
 public:
  user_session_request();
  virtual ~user_session_request();

  user_session_request(const user_session_request& from);

  inline user_session_request& operator=(const user_session_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_session_request& default_instance();

  void Swap(user_session_request* other);

  // implements Message ----------------------------------------------

  user_session_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_session_request& from);
  void MergeFrom(const user_session_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // required string sk = 2;
  inline bool has_sk() const;
  inline void clear_sk();
  static const int kSkFieldNumber = 2;
  inline const ::std::string& sk() const;
  inline void set_sk(const ::std::string& value);
  inline void set_sk(const char* value);
  inline void set_sk(const char* value, size_t size);
  inline ::std::string* mutable_sk();
  inline ::std::string* release_sk();
  inline void set_allocated_sk(::std::string* sk);

  // @@protoc_insertion_point(class_scope:user_session_request)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_sk();
  inline void clear_has_sk();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  ::std::string* sk_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static user_session_request* default_instance_;
};
// -------------------------------------------------------------------

class user_session_reply : public ::google::protobuf::Message {
 public:
  user_session_reply();
  virtual ~user_session_reply();

  user_session_reply(const user_session_reply& from);

  inline user_session_reply& operator=(const user_session_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_session_reply& default_instance();

  void Swap(user_session_reply* other);

  // implements Message ----------------------------------------------

  user_session_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_session_reply& from);
  void MergeFrom(const user_session_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  // required uint64 uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string sk = 3;
  inline bool has_sk() const;
  inline void clear_sk();
  static const int kSkFieldNumber = 3;
  inline const ::std::string& sk() const;
  inline void set_sk(const ::std::string& value);
  inline void set_sk(const char* value);
  inline void set_sk(const char* value, size_t size);
  inline ::std::string* mutable_sk();
  inline ::std::string* release_sk();
  inline void set_allocated_sk(::std::string* sk);

  // @@protoc_insertion_point(class_scope:user_session_reply)
 private:
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_sk();
  inline void clear_has_sk();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  ::std::string* sk_;
  ::google::protobuf::int32 err_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static user_session_reply* default_instance_;
};
// -------------------------------------------------------------------

class user_login_reply : public ::google::protobuf::Message {
 public:
  user_login_reply();
  virtual ~user_login_reply();

  user_login_reply(const user_login_reply& from);

  inline user_login_reply& operator=(const user_login_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_login_reply& default_instance();

  void Swap(user_login_reply* other);

  // implements Message ----------------------------------------------

  user_login_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_login_reply& from);
  void MergeFrom(const user_login_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  // required uint64 uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string sk = 3;
  inline bool has_sk() const;
  inline void clear_sk();
  static const int kSkFieldNumber = 3;
  inline const ::std::string& sk() const;
  inline void set_sk(const ::std::string& value);
  inline void set_sk(const char* value);
  inline void set_sk(const char* value, size_t size);
  inline ::std::string* mutable_sk();
  inline ::std::string* release_sk();
  inline void set_allocated_sk(::std::string* sk);

  // optional string gateip = 4;
  inline bool has_gateip() const;
  inline void clear_gateip();
  static const int kGateipFieldNumber = 4;
  inline const ::std::string& gateip() const;
  inline void set_gateip(const ::std::string& value);
  inline void set_gateip(const char* value);
  inline void set_gateip(const char* value, size_t size);
  inline ::std::string* mutable_gateip();
  inline ::std::string* release_gateip();
  inline void set_allocated_gateip(::std::string* gateip);

  // optional int32 gateport = 5;
  inline bool has_gateport() const;
  inline void clear_gateport();
  static const int kGateportFieldNumber = 5;
  inline ::google::protobuf::int32 gateport() const;
  inline void set_gateport(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:user_login_reply)
 private:
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_sk();
  inline void clear_has_sk();
  inline void set_has_gateip();
  inline void clear_has_gateip();
  inline void set_has_gateport();
  inline void clear_has_gateport();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  ::std::string* sk_;
  ::google::protobuf::int32 err_;
  ::google::protobuf::int32 gateport_;
  ::std::string* gateip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static user_login_reply* default_instance_;
};
// -------------------------------------------------------------------

class login_reply : public ::google::protobuf::Message {
 public:
  login_reply();
  virtual ~login_reply();

  login_reply(const login_reply& from);

  inline login_reply& operator=(const login_reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const login_reply& default_instance();

  void Swap(login_reply* other);

  // implements Message ----------------------------------------------

  login_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const login_reply& from);
  void MergeFrom(const login_reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  // optional uint64 uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string sk = 3;
  inline bool has_sk() const;
  inline void clear_sk();
  static const int kSkFieldNumber = 3;
  inline const ::std::string& sk() const;
  inline void set_sk(const ::std::string& value);
  inline void set_sk(const char* value);
  inline void set_sk(const char* value, size_t size);
  inline ::std::string* mutable_sk();
  inline ::std::string* release_sk();
  inline void set_allocated_sk(::std::string* sk);

  // optional string gateip = 4;
  inline bool has_gateip() const;
  inline void clear_gateip();
  static const int kGateipFieldNumber = 4;
  inline const ::std::string& gateip() const;
  inline void set_gateip(const ::std::string& value);
  inline void set_gateip(const char* value);
  inline void set_gateip(const char* value, size_t size);
  inline ::std::string* mutable_gateip();
  inline ::std::string* release_gateip();
  inline void set_allocated_gateip(::std::string* gateip);

  // optional int32 gateport = 5;
  inline bool has_gateport() const;
  inline void clear_gateport();
  static const int kGateportFieldNumber = 5;
  inline ::google::protobuf::int32 gateport() const;
  inline void set_gateport(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:login_reply)
 private:
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_sk();
  inline void clear_has_sk();
  inline void set_has_gateip();
  inline void clear_has_gateip();
  inline void set_has_gateport();
  inline void clear_has_gateport();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  ::std::string* sk_;
  ::google::protobuf::int32 err_;
  ::google::protobuf::int32 gateport_;
  ::std::string* gateip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static login_reply* default_instance_;
};
// ===================================================================


// ===================================================================

// login_request

// required string account = 1;
inline bool login_request::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void login_request::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void login_request::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void login_request::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& login_request::account() const {
  return *account_;
}
inline void login_request::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void login_request::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void login_request::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* login_request::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* login_request::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void login_request::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string passwd = 2;
inline bool login_request::has_passwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void login_request::set_has_passwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void login_request::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void login_request::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& login_request::passwd() const {
  return *passwd_;
}
inline void login_request::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void login_request::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void login_request::set_passwd(const char* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* login_request::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  return passwd_;
}
inline ::std::string* login_request::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void login_request::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// user_login_request

// required uint64 uid = 1;
inline bool user_login_request::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_login_request::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_login_request::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_login_request::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 user_login_request::uid() const {
  return uid_;
}
inline void user_login_request::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// -------------------------------------------------------------------

// user_session_request

// required uint64 uid = 1;
inline bool user_session_request::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_session_request::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_session_request::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_session_request::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 user_session_request::uid() const {
  return uid_;
}
inline void user_session_request::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// required string sk = 2;
inline bool user_session_request::has_sk() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_session_request::set_has_sk() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_session_request::clear_has_sk() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_session_request::clear_sk() {
  if (sk_ != &::google::protobuf::internal::kEmptyString) {
    sk_->clear();
  }
  clear_has_sk();
}
inline const ::std::string& user_session_request::sk() const {
  return *sk_;
}
inline void user_session_request::set_sk(const ::std::string& value) {
  set_has_sk();
  if (sk_ == &::google::protobuf::internal::kEmptyString) {
    sk_ = new ::std::string;
  }
  sk_->assign(value);
}
inline void user_session_request::set_sk(const char* value) {
  set_has_sk();
  if (sk_ == &::google::protobuf::internal::kEmptyString) {
    sk_ = new ::std::string;
  }
  sk_->assign(value);
}
inline void user_session_request::set_sk(const char* value, size_t size) {
  set_has_sk();
  if (sk_ == &::google::protobuf::internal::kEmptyString) {
    sk_ = new ::std::string;
  }
  sk_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_session_request::mutable_sk() {
  set_has_sk();
  if (sk_ == &::google::protobuf::internal::kEmptyString) {
    sk_ = new ::std::string;
  }
  return sk_;
}
inline ::std::string* user_session_request::release_sk() {
  clear_has_sk();
  if (sk_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sk_;
    sk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void user_session_request::set_allocated_sk(::std::string* sk) {
  if (sk_ != &::google::protobuf::internal::kEmptyString) {
    delete sk_;
  }
  if (sk) {
    set_has_sk();
    sk_ = sk;
  } else {
    clear_has_sk();
    sk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// user_session_reply

// required int32 err = 1;
inline bool user_session_reply::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_session_reply::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_session_reply::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_session_reply::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 user_session_reply::err() const {
  return err_;
}
inline void user_session_reply::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
}

// required uint64 uid = 2;
inline bool user_session_reply::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_session_reply::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_session_reply::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_session_reply::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 user_session_reply::uid() const {
  return uid_;
}
inline void user_session_reply::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional string sk = 3;
inline bool user_session_reply::has_sk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_session_reply::set_has_sk() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_session_reply::clear_has_sk() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_session_reply::clear_sk() {
  if (sk_ != &::google::protobuf::internal::kEmptyString) {
    sk_->clear();
  }
  clear_has_sk();
}
inline const ::std::string& user_session_reply::sk() const {
  return *sk_;
}
inline void user_session_reply::set_sk(const ::std::string& value) {
  set_has_sk();
  if (sk_ == &::google::protobuf::internal::kEmptyString) {
    sk_ = new ::std::string;
  }
  sk_->assign(value);
}
inline void user_session_reply::set_sk(const char* value) {
  set_has_sk();
  if (sk_ == &::google::protobuf::internal::kEmptyString) {
    sk_ = new ::std::string;
  }
  sk_->assign(value);
}
inline void user_session_reply::set_sk(const char* value, size_t size) {
  set_has_sk();
  if (sk_ == &::google::protobuf::internal::kEmptyString) {
    sk_ = new ::std::string;
  }
  sk_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_session_reply::mutable_sk() {
  set_has_sk();
  if (sk_ == &::google::protobuf::internal::kEmptyString) {
    sk_ = new ::std::string;
  }
  return sk_;
}
inline ::std::string* user_session_reply::release_sk() {
  clear_has_sk();
  if (sk_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sk_;
    sk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void user_session_reply::set_allocated_sk(::std::string* sk) {
  if (sk_ != &::google::protobuf::internal::kEmptyString) {
    delete sk_;
  }
  if (sk) {
    set_has_sk();
    sk_ = sk;
  } else {
    clear_has_sk();
    sk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// user_login_reply

// required int32 err = 1;
inline bool user_login_reply::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_login_reply::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_login_reply::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_login_reply::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 user_login_reply::err() const {
  return err_;
}
inline void user_login_reply::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
}

// required uint64 uid = 2;
inline bool user_login_reply::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_login_reply::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_login_reply::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_login_reply::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 user_login_reply::uid() const {
  return uid_;
}
inline void user_login_reply::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional string sk = 3;
inline bool user_login_reply::has_sk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_login_reply::set_has_sk() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_login_reply::clear_has_sk() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_login_reply::clear_sk() {
  if (sk_ != &::google::protobuf::internal::kEmptyString) {
    sk_->clear();
  }
  clear_has_sk();
}
inline const ::std::string& user_login_reply::sk() const {
  return *sk_;
}
inline void user_login_reply::set_sk(const ::std::string& value) {
  set_has_sk();
  if (sk_ == &::google::protobuf::internal::kEmptyString) {
    sk_ = new ::std::string;
  }
  sk_->assign(value);
}
inline void user_login_reply::set_sk(const char* value) {
  set_has_sk();
  if (sk_ == &::google::protobuf::internal::kEmptyString) {
    sk_ = new ::std::string;
  }
  sk_->assign(value);
}
inline void user_login_reply::set_sk(const char* value, size_t size) {
  set_has_sk();
  if (sk_ == &::google::protobuf::internal::kEmptyString) {
    sk_ = new ::std::string;
  }
  sk_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_login_reply::mutable_sk() {
  set_has_sk();
  if (sk_ == &::google::protobuf::internal::kEmptyString) {
    sk_ = new ::std::string;
  }
  return sk_;
}
inline ::std::string* user_login_reply::release_sk() {
  clear_has_sk();
  if (sk_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sk_;
    sk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void user_login_reply::set_allocated_sk(::std::string* sk) {
  if (sk_ != &::google::protobuf::internal::kEmptyString) {
    delete sk_;
  }
  if (sk) {
    set_has_sk();
    sk_ = sk;
  } else {
    clear_has_sk();
    sk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string gateip = 4;
inline bool user_login_reply::has_gateip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_login_reply::set_has_gateip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_login_reply::clear_has_gateip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_login_reply::clear_gateip() {
  if (gateip_ != &::google::protobuf::internal::kEmptyString) {
    gateip_->clear();
  }
  clear_has_gateip();
}
inline const ::std::string& user_login_reply::gateip() const {
  return *gateip_;
}
inline void user_login_reply::set_gateip(const ::std::string& value) {
  set_has_gateip();
  if (gateip_ == &::google::protobuf::internal::kEmptyString) {
    gateip_ = new ::std::string;
  }
  gateip_->assign(value);
}
inline void user_login_reply::set_gateip(const char* value) {
  set_has_gateip();
  if (gateip_ == &::google::protobuf::internal::kEmptyString) {
    gateip_ = new ::std::string;
  }
  gateip_->assign(value);
}
inline void user_login_reply::set_gateip(const char* value, size_t size) {
  set_has_gateip();
  if (gateip_ == &::google::protobuf::internal::kEmptyString) {
    gateip_ = new ::std::string;
  }
  gateip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_login_reply::mutable_gateip() {
  set_has_gateip();
  if (gateip_ == &::google::protobuf::internal::kEmptyString) {
    gateip_ = new ::std::string;
  }
  return gateip_;
}
inline ::std::string* user_login_reply::release_gateip() {
  clear_has_gateip();
  if (gateip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gateip_;
    gateip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void user_login_reply::set_allocated_gateip(::std::string* gateip) {
  if (gateip_ != &::google::protobuf::internal::kEmptyString) {
    delete gateip_;
  }
  if (gateip) {
    set_has_gateip();
    gateip_ = gateip;
  } else {
    clear_has_gateip();
    gateip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 gateport = 5;
inline bool user_login_reply::has_gateport() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void user_login_reply::set_has_gateport() {
  _has_bits_[0] |= 0x00000010u;
}
inline void user_login_reply::clear_has_gateport() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void user_login_reply::clear_gateport() {
  gateport_ = 0;
  clear_has_gateport();
}
inline ::google::protobuf::int32 user_login_reply::gateport() const {
  return gateport_;
}
inline void user_login_reply::set_gateport(::google::protobuf::int32 value) {
  set_has_gateport();
  gateport_ = value;
}

// -------------------------------------------------------------------

// login_reply

// required int32 err = 1;
inline bool login_reply::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void login_reply::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void login_reply::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void login_reply::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 login_reply::err() const {
  return err_;
}
inline void login_reply::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
}

// optional uint64 uid = 2;
inline bool login_reply::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void login_reply::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void login_reply::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void login_reply::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 login_reply::uid() const {
  return uid_;
}
inline void login_reply::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional string sk = 3;
inline bool login_reply::has_sk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void login_reply::set_has_sk() {
  _has_bits_[0] |= 0x00000004u;
}
inline void login_reply::clear_has_sk() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void login_reply::clear_sk() {
  if (sk_ != &::google::protobuf::internal::kEmptyString) {
    sk_->clear();
  }
  clear_has_sk();
}
inline const ::std::string& login_reply::sk() const {
  return *sk_;
}
inline void login_reply::set_sk(const ::std::string& value) {
  set_has_sk();
  if (sk_ == &::google::protobuf::internal::kEmptyString) {
    sk_ = new ::std::string;
  }
  sk_->assign(value);
}
inline void login_reply::set_sk(const char* value) {
  set_has_sk();
  if (sk_ == &::google::protobuf::internal::kEmptyString) {
    sk_ = new ::std::string;
  }
  sk_->assign(value);
}
inline void login_reply::set_sk(const char* value, size_t size) {
  set_has_sk();
  if (sk_ == &::google::protobuf::internal::kEmptyString) {
    sk_ = new ::std::string;
  }
  sk_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* login_reply::mutable_sk() {
  set_has_sk();
  if (sk_ == &::google::protobuf::internal::kEmptyString) {
    sk_ = new ::std::string;
  }
  return sk_;
}
inline ::std::string* login_reply::release_sk() {
  clear_has_sk();
  if (sk_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sk_;
    sk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void login_reply::set_allocated_sk(::std::string* sk) {
  if (sk_ != &::google::protobuf::internal::kEmptyString) {
    delete sk_;
  }
  if (sk) {
    set_has_sk();
    sk_ = sk;
  } else {
    clear_has_sk();
    sk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string gateip = 4;
inline bool login_reply::has_gateip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void login_reply::set_has_gateip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void login_reply::clear_has_gateip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void login_reply::clear_gateip() {
  if (gateip_ != &::google::protobuf::internal::kEmptyString) {
    gateip_->clear();
  }
  clear_has_gateip();
}
inline const ::std::string& login_reply::gateip() const {
  return *gateip_;
}
inline void login_reply::set_gateip(const ::std::string& value) {
  set_has_gateip();
  if (gateip_ == &::google::protobuf::internal::kEmptyString) {
    gateip_ = new ::std::string;
  }
  gateip_->assign(value);
}
inline void login_reply::set_gateip(const char* value) {
  set_has_gateip();
  if (gateip_ == &::google::protobuf::internal::kEmptyString) {
    gateip_ = new ::std::string;
  }
  gateip_->assign(value);
}
inline void login_reply::set_gateip(const char* value, size_t size) {
  set_has_gateip();
  if (gateip_ == &::google::protobuf::internal::kEmptyString) {
    gateip_ = new ::std::string;
  }
  gateip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* login_reply::mutable_gateip() {
  set_has_gateip();
  if (gateip_ == &::google::protobuf::internal::kEmptyString) {
    gateip_ = new ::std::string;
  }
  return gateip_;
}
inline ::std::string* login_reply::release_gateip() {
  clear_has_gateip();
  if (gateip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gateip_;
    gateip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void login_reply::set_allocated_gateip(::std::string* gateip) {
  if (gateip_ != &::google::protobuf::internal::kEmptyString) {
    delete gateip_;
  }
  if (gateip) {
    set_has_gateip();
    gateip_ = gateip;
  } else {
    clear_has_gateip();
    gateip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 gateport = 5;
inline bool login_reply::has_gateport() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void login_reply::set_has_gateport() {
  _has_bits_[0] |= 0x00000010u;
}
inline void login_reply::clear_has_gateport() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void login_reply::clear_gateport() {
  gateport_ = 0;
  clear_has_gateport();
}
inline ::google::protobuf::int32 login_reply::gateport() const {
  return gateport_;
}
inline void login_reply::set_gateport(::google::protobuf::int32 value) {
  set_has_gateport();
  gateport_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_login_2eproto__INCLUDED
